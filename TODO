Random Ideas, Todos and Remarks

suppressTriggers() on TAObject and TAComposition
(and a reenable function of course)

better event bus system?

wait for more than 1 event? like app.on(["state1:in", "state2:in"], func) so when BOTH are triggered...
sucks because we need stateful handling, currently done by event converter

we have states, an array with names. you can move a composition to another state if it is in.
the composition knows all states but its members dont have to have all states (no animation is done then)
do we want steps instead? named steps maybe?
maybe keep in and out and make while a multistep system with something like a cycleAnimation object?
maybe a complex system with named steps. maybe something like curPos independent animations? but how to do that?
maybe just a normal step system where each object may or may not animate a certain step - these could be named
instead of just numbered. a gotoStep(3) would animate 1,2,3 in order.
a step skipping would be cool
figure out how this would work with an object that is registred in multiple composition.
maybe prevent that??

we need a stop() function for animations

what about endless loop animations? they have no complete. how to handle that?
maybe change while for endless animations? but how to stop them? how does velocity handles that?

add TAJQueryAnimation and GSOCKS tween animation

redesign code!
class names SUCK!!!
allow method chaining (return this all the time)
find out how to properly expose constructors
make it AMD compatible
find out what CommonJS has to say about JS lib design

composition and object should have onIn and onOut callbacks

desc.start, desc.trigger, desc.waitFor, desc.startAndWaitFor need to take arrays as param as well

desc.waitForMulti() takes array of desc and waits until all are finished executing before advancing

timeline needs a stop() and triggerAndStop() and startAndStop
stop stops execution until someone manually calls next()
this might be set as single step mode in the tl object, so we can advance manually while debugging

split code up in modules

check if we really need jquery and drop dependency if possible

implement a pause/play mechanic for timeline

isnt TAComposition basically a TAParallelAnimation ?

TABackgroundAnimation - an animation object that completes instantly while the animation runs in the background
TAFunctionAnimation - an animation object that calls a function
TARepeatAnimation - like MyRepeatAnimation but done right
TARepeatWhileAnimation - repeat animations until the predicate returns false

maybe TABackgroundAnimation with TARepeatWhileAnimation can be our endless looping animations?

figure out whats the deal about complete() param. is it the object, is it the animation, what the hell?
do we even need it???

objects registered to a composition should be targetable by composition/object:in
keep in mind this means they need to trigger the right stuff too once complete

TAComposition.unregister()
TAObject.destroy()
general cleanup stuff

make a baseOnTAObject function, which clones a TAObject but replaces $e and name (to allow easy cloning)

ease of use: make animation skeletons like createFadeInAnimation(msecs) which returns a TAVelocityAnimation that
fades in using opacity in msecs millisecs
this means we need to be able to add TAObjectSettings to TAObjects.

add onNext() callback to TATimeline that gets called everytime the timeline advances.
